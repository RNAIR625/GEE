{
  "openapi": "3.0.0",
  "info": {
    "title": "GEE Pistachio Flow Designer API",
    "description": "Comprehensive API for the GEE Pistachio application including Flow Designer, Rules, Fields, Functions, Classes, and Table management",
    "version": "2.0.0",
    "contact": {
      "name": "GEE Pistachio API Support",
      "email": "support@geepistachio.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5002",
      "description": "Development server"
    },
    {
      "url": "https://api.geepistachio.com/v2",
      "description": "Production server"
    }
  ],
  "paths": {
    "/flow_designer": {
      "get": {
        "summary": "Flow Designer Page",
        "description": "Renders the main Flow Designer interface",
        "tags": ["Flow Designer"],
        "responses": {
          "200": {
            "description": "Flow Designer HTML page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/get_palette_rules": {
      "get": {
        "summary": "Get Palette Rules",
        "description": "Retrieves all rules available for the Flow Designer palette",
        "tags": ["Flow Designer"],
        "responses": {
          "200": {
            "description": "List of palette rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaletteRule"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/get_palette_rule_groups": {
      "get": {
        "summary": "Get Palette Rule Groups",
        "description": "Retrieves all rule groups available for the Flow Designer palette",
        "tags": ["Flow Designer"],
        "responses": {
          "200": {
            "description": "List of palette rule groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaletteRuleGroup"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/get_palette_stations": {
      "get": {
        "summary": "Get Palette Stations",
        "description": "Retrieves all stations available for the Flow Designer palette",
        "tags": ["Flow Designer"],
        "responses": {
          "200": {
            "description": "List of palette stations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaletteStation"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/save_flow": {
      "post": {
        "summary": "Save Flow",
        "description": "Saves a flow design including nodes and connections",
        "tags": ["Flow Designer"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveFlowRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveFlowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/get_flow/{flow_id}": {
      "get": {
        "summary": "Get Flow by ID",
        "description": "Retrieves a specific flow with its nodes and connections",
        "tags": ["Flow Designer"],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the flow to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Flow data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFlowResponse"
                }
              }
            }
          },
          "404": {
            "description": "Flow not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/get_flows": {
      "get": {
        "summary": "Get All Flows",
        "description": "Retrieves a list of all saved flows",
        "tags": ["Flow Designer"],
        "responses": {
          "200": {
            "description": "List of flows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlowSummary"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/flow_designer/delete_flow/{flow_id}": {
      "delete": {
        "summary": "Delete Flow",
        "description": "Deletes a flow and all its associated data",
        "tags": ["Flow Designer"],
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the flow to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Flow deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classes": {
      "get": {
        "summary": "Field Classes Page",
        "description": "Renders the Field Classes management interface",
        "tags": ["Field Classes"],
        "responses": {
          "200": {
            "description": "Field Classes HTML page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/classes/get_classes": {
      "get": {
        "summary": "Get All Field Classes",
        "description": "Retrieves all field classes with hierarchical parent-child relationships",
        "tags": ["Field Classes"],
        "responses": {
          "200": {
            "description": "List of field classes with hierarchy information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldClass"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classes/add_class": {
      "post": {
        "summary": "Create Field Class",
        "description": "Creates a new field class with optional parent-child relationship",
        "tags": ["Field Classes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFieldClassRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Field class created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classes/update_class": {
      "put": {
        "summary": "Update Field Class",
        "description": "Updates an existing field class including parent-child relationships",
        "tags": ["Field Classes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFieldClassRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Field class updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classes/delete_class/{gfc_id}": {
      "delete": {
        "summary": "Delete Field Class",
        "description": "Deletes a field class if not being used by any fields",
        "tags": ["Field Classes"],
        "parameters": [
          {
            "name": "gfc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the field class to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Field class deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete - class is being used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/classes/bulk_delete_classes": {
      "delete": {
        "summary": "Bulk Delete Field Classes",
        "description": "Deletes multiple field classes in a single operation",
        "tags": ["Field Classes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["class_ids"],
                "properties": {
                  "class_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Array of field class IDs to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk delete operation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "deleted_count": {
                      "type": "integer"
                    },
                    "skipped_count": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tax/calculate": {
      "post": {
        "summary": "Calculate Canadian taxes for a product",
        "description": "Calculates GST, HST, and PST based on product ID and postal codes",
        "operationId": "calculateTax",
        "tags": ["Tax Calculation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxCalculationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful tax calculation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCalculationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PaletteRule": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Rule ID"
          },
          "name": {
            "type": "string",
            "description": "Rule name"
          },
          "RULE_TYPE": {
            "type": "string",
            "description": "Type of rule"
          },
          "DESCRIPTION": {
            "type": "string",
            "description": "Rule description"
          },
          "class_name": {
            "type": "string",
            "description": "Associated field class name"
          }
        }
      },
      "PaletteRuleGroup": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Rule group ID"
          },
          "name": {
            "type": "string",
            "description": "Rule group name"
          },
          "COND_TYPE": {
            "type": "string",
            "description": "Condition type"
          },
          "DESCRIPTION": {
            "type": "string",
            "description": "Rule group description"
          }
        }
      },
      "PaletteStation": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Station ID"
          },
          "name": {
            "type": "string",
            "description": "Station name"
          },
          "STATION_TYPE": {
            "type": "string",
            "description": "Type of station"
          },
          "DESCRIPTION": {
            "type": "string",
            "description": "Station description"
          }
        }
      },
      "FlowNode": {
        "type": "object",
        "required": ["id", "type", "name", "x", "y"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique node identifier"
          },
          "type": {
            "type": "string",
            "enum": ["rule", "rule_group", "station"],
            "description": "Type of node"
          },
          "name": {
            "type": "string",
            "description": "Display name of the node"
          },
          "x": {
            "type": "number",
            "description": "X position in the canvas"
          },
          "y": {
            "type": "number",
            "description": "Y position in the canvas"
          },
          "width": {
            "type": "number",
            "description": "Width of the node",
            "default": 150
          },
          "height": {
            "type": "number",
            "description": "Height of the node",
            "default": 60
          },
          "referenceId": {
            "type": "integer",
            "description": "ID reference to the original rule/group/station"
          },
          "settings": {
            "type": "object",
            "description": "Custom node settings",
            "additionalProperties": true
          }
        }
      },
      "FlowConnection": {
        "type": "object",
        "required": ["id", "sourceId", "targetId"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique connection identifier"
          },
          "sourceId": {
            "type": "string",
            "description": "ID of the source node"
          },
          "targetId": {
            "type": "string",
            "description": "ID of the target node"
          },
          "type": {
            "type": "string",
            "enum": ["SUCCESS", "FAILURE", "CONDITIONAL", "DEFAULT"],
            "description": "Type of connection",
            "default": "DEFAULT"
          },
          "condition": {
            "type": "string",
            "description": "Condition expression for conditional connections"
          },
          "label": {
            "type": "string",
            "description": "Display label for the connection"
          }
        }
      },
      "SaveFlowRequest": {
        "type": "object",
        "required": ["flowName"],
        "properties": {
          "flowId": {
            "type": "integer",
            "description": "Flow ID for updates (omit for new flows)"
          },
          "flowName": {
            "type": "string",
            "description": "Name of the flow"
          },
          "description": {
            "type": "string",
            "description": "Flow description"
          },
          "version": {
            "type": "integer",
            "description": "Flow version number",
            "default": 1
          },
          "user": {
            "type": "string",
            "description": "User saving the flow",
            "default": "admin"
          },
          "comments": {
            "type": "string",
            "description": "Version comments"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowNode"
            },
            "description": "Array of flow nodes"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowConnection"
            },
            "description": "Array of flow connections"
          }
        }
      },
      "SaveFlowResponse": {
        "type": "object",
        "required": ["success", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          },
          "message": {
            "type": "string",
            "description": "Success or error message"
          },
          "flowId": {
            "type": "integer",
            "description": "ID of the saved flow"
          }
        }
      },
      "FlowSummary": {
        "type": "object",
        "required": ["FLOW_ID", "FLOW_NAME"],
        "properties": {
          "FLOW_ID": {
            "type": "integer",
            "description": "Flow ID"
          },
          "FLOW_NAME": {
            "type": "string",
            "description": "Flow name"
          },
          "DESCRIPTION": {
            "type": "string",
            "description": "Flow description"
          },
          "VERSION": {
            "type": "integer",
            "description": "Current version"
          },
          "STATUS": {
            "type": "string",
            "description": "Flow status"
          },
          "CREATED_BY": {
            "type": "string",
            "description": "User who created the flow"
          },
          "LAST_EDITED_BY": {
            "type": "string",
            "description": "User who last edited the flow"
          },
          "CREATE_DATE": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "UPDATE_DATE": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "GetFlowResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          },
          "flow": {
            "$ref": "#/components/schemas/FlowSummary"
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "NODE_ID": {
                  "type": "integer"
                },
                "NODE_TYPE": {
                  "type": "string"
                },
                "REFERENCE_ID": {
                  "type": "integer"
                },
                "POSITION_X": {
                  "type": "number"
                },
                "POSITION_Y": {
                  "type": "number"
                },
                "WIDTH": {
                  "type": "number"
                },
                "HEIGHT": {
                  "type": "number"
                },
                "LABEL": {
                  "type": "string"
                },
                "CUSTOM_SETTINGS": {
                  "type": "string",
                  "description": "JSON string of custom settings"
                }
              }
            }
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "CONNECTION_ID": {
                  "type": "integer"
                },
                "SOURCE_NODE_ID": {
                  "type": "integer"
                },
                "TARGET_NODE_ID": {
                  "type": "integer"
                },
                "CONNECTION_TYPE": {
                  "type": "string"
                },
                "CONDITION_EXPRESSION": {
                  "type": "string"
                },
                "LABEL": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TaxCalculationRequest": {
        "type": "object",
        "required": ["objectId", "userPincode", "storePincode"],
        "properties": {
          "objectId": {
            "type": "string",
            "description": "Product identifier",
            "example": "Parker Pen"
          },
          "userPincode": {
            "type": "string",
            "description": "User's postal code",
            "pattern": "^[A-Za-z]\\d[A-Za-z] ?\\d[A-Za-z]\\d$",
            "example": "M5V 3A8"
          },
          "storePincode": {
            "type": "string",
            "description": "Store's postal code",
            "pattern": "^[A-Za-z]\\d[A-Za-z] ?\\d[A-Za-z]\\d$",
            "example": "K1A 0B1"
          }
        }
      },
      "TaxCalculationResponse": {
        "type": "object",
        "required": ["objectValue", "objectGST", "objectHST", "objectPST"],
        "properties": {
          "objectValue": {
            "type": "string",
            "description": "Product value before tax",
            "pattern": "^\\$\\d+(\\.\\d{2})?$",
            "example": "$46"
          },
          "objectGST": {
            "type": "string",
            "description": "Calculated GST amount",
            "pattern": "^\\$\\d+(\\.\\d{2})?$",
            "example": "$6.56"
          },
          "objectHST": {
            "type": "string",
            "description": "Calculated HST amount",
            "pattern": "^\\$\\d+(\\.\\d{2})?$",
            "example": "$1.5"
          },
          "objectPST": {
            "type": "string",
            "description": "Calculated PST amount",
            "pattern": "^\\$\\d+(\\.\\d{2})?$",
            "example": "$0"
          }
        }
      },
      "FieldClass": {
        "type": "object",
        "required": ["GFC_ID", "FIELD_CLASS_NAME", "CLASS_TYPE"],
        "properties": {
          "GFC_ID": {
            "type": "integer",
            "description": "Field Class ID"
          },
          "PARENT_GFC_ID": {
            "type": "integer",
            "description": "Parent Field Class ID for hierarchical relationships",
            "nullable": true
          },
          "FIELD_CLASS_NAME": {
            "type": "string",
            "description": "Field class name"
          },
          "CLASS_TYPE": {
            "type": "string",
            "description": "Type of class",
            "enum": ["API", "ENTITY", "VALIDATION", "PROCESS", "INPUT", "OUTPUT"]
          },
          "DESCRIPTION": {
            "type": "string",
            "description": "Class description"
          },
          "PARENT_CLASS_NAME": {
            "type": "string",
            "description": "Name of parent class if applicable",
            "nullable": true
          },
          "CHILD_COUNT": {
            "type": "integer",
            "description": "Number of child classes"
          },
          "CREATE_DATE": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "UPDATE_DATE": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "CreateFieldClassRequest": {
        "type": "object",
        "required": ["className", "type"],
        "properties": {
          "className": {
            "type": "string",
            "description": "Name of the field class"
          },
          "type": {
            "type": "string",
            "description": "Type of the field class",
            "enum": ["API", "ENTITY", "VALIDATION", "PROCESS", "INPUT", "OUTPUT"]
          },
          "description": {
            "type": "string",
            "description": "Description of the field class"
          },
          "parentGfcId": {
            "type": "integer",
            "description": "ID of parent field class for hierarchical relationships",
            "nullable": true
          }
        }
      },
      "UpdateFieldClassRequest": {
        "type": "object",
        "required": ["gfcId", "className", "type"],
        "properties": {
          "gfcId": {
            "type": "integer",
            "description": "ID of the field class to update"
          },
          "className": {
            "type": "string",
            "description": "Name of the field class"
          },
          "type": {
            "type": "string",
            "description": "Type of the field class",
            "enum": ["API", "ENTITY", "VALIDATION", "PROCESS", "INPUT", "OUTPUT"]
          },
          "description": {
            "type": "string",
            "description": "Description of the field class"
          },
          "parentGfcId": {
            "type": "integer",
            "description": "ID of parent field class for hierarchical relationships",
            "nullable": true
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": ["success", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful"
          },
          "message": {
            "type": "string",
            "description": "Success message"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "default": false
          },
          "message": {
            "type": "string",
            "description": "Detailed error message"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for authentication"
      }
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Flow Designer",
      "description": "Visual flow designer for creating business process flows"
    },
    {
      "name": "Field Classes",
      "description": "Hierarchical field class management with parent-child relationships"
    },
    {
      "name": "Tax Calculation",
      "description": "Endpoints for calculating Canadian taxes"
    }
  ]
}